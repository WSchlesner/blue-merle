#!/bin/sh

. /lib/blue-merle/functions.sh
. /lib/functions/gl_util.sh

rm -f /tmp/blue-merle-stage1

mcu_send_message "Switch pulled.  Continuing..."
sleep 1
sim_switch on

leak=0

until gl_modem AT AT+CFUN=0 | grep -q OK
do
	mcu_send_message "CFUN=0 failed. Trying again."
	sleep 1
done

until gl_modem AT AT+CFUN=4 | grep -q OK
do
	leak=1
	mcu_send_message "CFUN=4 failed. Trying again."
	sleep 1
done

if [ $leak -eq 1 ]; then
	mcu_send_message "WARNING:        Reset took longer than expected."
	sleep 3
fi

sleep 1

old_imsi=$(cat /tmp/old_imsi)
new_imsi=$(READ_IMSI)

if [ "$old_imsi" = "$new_imsi" ]; then
	mcu_send_message "WARNING:        Old IMSI equals new IMSI. Did you swap the SIM?"
	sleep 3
fi

rm -f /tmp/old_imsi

# Read IMEI and TAC configuration from UCI config /etc/config/blue-merle
IMEI_MODE="random"
STATIC_IMEI=""
TAC_MODE="random_any"
TAC_CATEGORY=""
TAC_VALUE=""

# First, try to load the UCI config properly
if [ -f /etc/config/blue-merle ]; then
    # Use UCI commands to read the configuration
    IMEI_MODE=$(uci -q get blue-merle.imei.mode 2>/dev/null || echo "random")
    STATIC_IMEI=$(uci -q get blue-merle.imei.static_value 2>/dev/null || echo "")
    TAC_MODE=$(uci -q get blue-merle.imei.tac_mode 2>/dev/null || echo "random_any")
    TAC_CATEGORY=$(uci -q get blue-merle.imei.tac_category 2>/dev/null || echo "")
    TAC_VALUE=$(uci -q get blue-merle.imei.tac_value 2>/dev/null || echo "")
    
    # Fallback to manual parsing if UCI fails
    if [ -z "$IMEI_MODE" ] || [ "$IMEI_MODE" = "random" ]; then
        # Try alternative parsing methods
        if grep -q "option mode" /etc/config/blue-merle; then
            IMEI_MODE=$(awk '/option mode/ {gsub(/['"'"']/, "", $3); print $3}' /etc/config/blue-merle)
        fi
        if grep -q "option static_value" /etc/config/blue-merle; then
            STATIC_IMEI=$(awk '/option static_value/ {gsub(/['"'"']/, "", $3); print $3}' /etc/config/blue-merle)
        fi
        if grep -q "option tac_mode" /etc/config/blue-merle; then
            TAC_MODE=$(awk '/option tac_mode/ {gsub(/['"'"']/, "", $3); print $3}' /etc/config/blue-merle)
        fi
        if grep -q "option tac_category" /etc/config/blue-merle; then
            TAC_CATEGORY=$(awk '/option tac_category/ {gsub(/['"'"']/, "", $3); print $3}' /etc/config/blue-merle)
        fi
        if grep -q "option tac_value" /etc/config/blue-merle; then
            TAC_VALUE=$(awk '/option tac_value/ {gsub(/['"'"']/, "", $3); print $3}' /etc/config/blue-merle)
        fi
    fi
    
    # Debug output
    logger -p notice -t blue-merle-stage2 "Config file exists, IMEI_MODE='$IMEI_MODE', TAC_MODE='$TAC_MODE', TAC_CATEGORY='$TAC_CATEGORY', TAC_VALUE='$TAC_VALUE'"
    mcu_send_message "Config: Mode=$IMEI_MODE TAC=$TAC_MODE"
    sleep 3
else
    logger -p notice -t blue-merle-stage2 "Config file /etc/config/blue-merle not found, using defaults"
    mcu_send_message "No config file,  using random mode"
    sleep 3
fi

# Ensure we have a valid mode
case "$IMEI_MODE" in
    "static"|"deterministic"|"random")
        # Valid modes, keep as is
        ;;
    *)
        logger -p warn -t blue-merle-stage2 "Invalid IMEI mode '$IMEI_MODE', defaulting to random"
        IMEI_MODE="random"
        ;;
esac

# Ensure we have a valid TAC mode
case "$TAC_MODE" in
    "random_any"|"random_category"|"specific")
        # Valid TAC modes, keep as is
        ;;
    *)
        logger -p warn -t blue-merle-stage2 "Invalid TAC mode '$TAC_MODE', defaulting to random_any"
        TAC_MODE="random_any"
        ;;
esac

# Validate static IMEI if in static mode
if [ "$IMEI_MODE" = "static" ]; then
    if [ -z "$STATIC_IMEI" ] || [ ${#STATIC_IMEI} -ne 15 ] || ! echo "$STATIC_IMEI" | grep -q '^[0-9]*$'; then
        logger -p warn -t blue-merle-stage2 "Invalid static IMEI '$STATIC_IMEI', falling back to random mode"
        mcu_send_message "Invalid static   IMEI, using random"
        sleep 3
        IMEI_MODE="random"
    fi
fi

# Build python command arguments based on configuration
PYTHON_ARGS=""
TAC_ARGS=""

# Add TAC arguments based on mode (only for non-static IMEI modes)
if [ "$IMEI_MODE" != "static" ]; then
    TAC_ARGS="--tac-mode $TAC_MODE"
    
    if [ "$TAC_MODE" = "random_category" ] && [ -n "$TAC_CATEGORY" ]; then
        TAC_ARGS="$TAC_ARGS --tac-category $TAC_CATEGORY"
    elif [ "$TAC_MODE" = "specific" ] && [ -n "$TAC_VALUE" ]; then
        TAC_ARGS="$TAC_ARGS --tac-value $TAC_VALUE"
        if [ -n "$TAC_CATEGORY" ]; then
            TAC_ARGS="$TAC_ARGS --tac-category $TAC_CATEGORY"
        fi
    fi
fi

# Execute the appropriate IMEI generation based on mode
case "$IMEI_MODE" in
    "static")
        mcu_send_message "Setting static      IMEI: ${STATIC_IMEI:0:8}..."
        sleep 2
        logger -p notice -t blue-merle-stage2 "Setting static IMEI: $STATIC_IMEI"
        timeout 15 python3 /lib/blue-merle/imei_generate.py -s "$STATIC_IMEI"
        ;;
    "deterministic")
        mcu_send_message "Setting deterministic   IMEI with TAC: $TAC_MODE"
        sleep 2
        logger -p notice -t blue-merle-stage2 "Setting deterministic IMEI with TAC args: $TAC_ARGS"
        timeout 15 python3 /lib/blue-merle/imei_generate.py -d $TAC_ARGS
        ;;
    *)
        mcu_send_message "Setting random      IMEI with TAC: $TAC_MODE"
        sleep 2
        logger -p notice -t blue-merle-stage2 "Setting random IMEI with TAC args: $TAC_ARGS"
        timeout 15 python3 /lib/blue-merle/imei_generate.py -r $TAC_ARGS
        ;;
esac

old_imei=$(cat /tmp/old_imei)
new_imei=$(READ_IMEI)

if [ "$old_imei" = "$new_imei" ]; then
	mcu_send_message "WARNING:        Old IMEI equals new IMEI."
	logger -p warn -t blue-merle-stage2 "IMEI unchanged: $old_imei"
	sleep 3
else
	mcu_send_message  "IMEI Old:...... ${old_imei}IMEI New:...... ${new_imei}"
	logger -p notice -t blue-merle-stage2 "Changed IMEI from ${old_imei} to ${new_imei}"
	sleep 5
	mkdir -p /tmp/modem.1-1.2
	echo "$new_imei" > /tmp/modem.1-1.2/modem-imei
	# prevent imei leak via the LPA
	echo "$new_imei" > /root/esim/imei
	shred -u /root/esim/log.txt # unclear if the imei/imsi will be loged here, just a precaution
fi

rm -f /tmp/old_imei

mcu_send_message "The device will shutdown now."
sleep 3
mcu_send_message "You should      change your     location before booting again."
sleep 5

i=5
until  [ $i -eq 0 ]
do
        i=$((i-1))
        mcu_send_message "Shutting down... ($i)"
        sleep 1
done

logger -p notice -t blue-merle-stage2 "Finished with Stage 2"

# Note: calling /sbin/poweroff directly results in the device rebooting into a broken state
echo '{ "poweroff": "1" }' >/dev/ttyS0